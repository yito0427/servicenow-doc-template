# {{ project_name }} - テスト設計書

**バージョン:** {{ version }}  
**作成者:** {{ author.name }}  
**作成日:** {{ created_date | date_format }}  
**ドキュメントタイプ:** テスト設計書

---

## 1. 概要

### 1.1 目的
{{ test_overview.purpose }}

### 1.2 スコープ
{{ test_overview.scope }}

### 1.3 目標
{% for objective in test_overview.objectives %}
- {{ objective }}
{% endfor %}

### 1.4 成果物
{% for deliverable in test_overview.deliverables %}
- {{ deliverable }}
{% endfor %}

---

## 2. テスト戦略

### 2.1 テストアプローチ
{{ test_strategy.approach }}

### 2.2 テストレベル
{% for level in test_strategy.test_levels %}
- {{ level }}
{% endfor %}

### 2.3 開始基準
{% for criterion in test_strategy.entry_criteria %}
- {{ criterion }}
{% endfor %}

### 2.4 終了基準
{% for criterion in test_strategy.exit_criteria %}
- {{ criterion }}
{% endfor %}

### 2.5 中断・再開基準
{% for criterion in test_strategy.suspension_criteria %}
- {{ criterion }}
{% endfor %}

### 2.6 テスト実施方針

#### リスクベースアプローチ
- 高リスク機能を優先的にテスト
- ビジネスクリティカルな機能に注力
- 使用頻度の高い機能を重点的に検証

#### 段階的実施
- 基本機能から複雑な統合機能へ
- 単体→結合→システム→受入の順序
- 各フェーズでの品質ゲート設定

#### 自動化優先
- 回帰テストの自動化必須
- APIテストの自動化推進
- CI/CDパイプラインへの統合

---

## 3. テスト計画

### 3.1 テストフェーズ

{% for phase in test_phases %}
#### {{ phase.phase }}
- **期間**: {{ phase.duration }}
- **責任者**: {{ phase.responsible }}
- **スコープ**: {{ phase.scope }}
- **ツール**: {{ phase.tools }}

{% endfor %}

### 3.2 テストスケジュール

```
┌─────────────┬───────┬───────┬───────┬───────┬───────┬───────┬───────┬───────┐
│ フェーズ     │ 週1   │ 週2   │ 週3   │ 週4   │ 週5   │ 週6   │ 週7   │ 週8   │
├─────────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤
│ 単体テスト   │ ████  │ ████  │       │       │       │       │       │       │
├─────────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤
│ 結合テスト   │       │ ████  │ ████  │ ████  │       │       │       │       │
├─────────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤
│ システムテスト│       │       │       │ ████  │ ████  │ ████  │ ████  │       │
├─────────────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┼───────┤
│ 受入テスト   │       │       │       │       │       │ ████  │ ████  │ ████  │
└─────────────┴───────┴───────┴───────┴───────┴───────┴───────┴───────┴───────┘
```

### 3.3 リソース計画

| 役割 | 人数 | フェーズ | 主な責任 |
|------|------|----------|----------|
| テストマネージャー | 1名 | 全フェーズ | テスト統括、報告 |
| テストリード | 2名 | 全フェーズ | テスト設計、実行管理 |
| テストエンジニア | 5名 | IT〜UAT | テスト実行、欠陥報告 |
| 自動化エンジニア | 2名 | 全フェーズ | 自動化開発、保守 |
| 性能テストエンジニア | 2名 | ST | 性能テスト実施 |
| ビジネスユーザー | 10名 | UAT | 受入テスト実施 |

---

## 4. テストケース設計

### 4.1 テストタイプ

{% for test_type in test_types %}
#### {{ test_type.type }}
- **説明**: {{ test_type.description }}
- **カバレッジ**: {{ test_type.coverage }}
- **実施方法**: {{ test_type.method }}
- **優先度**: {{ test_type.priority }}

{% endfor %}

### 4.2 テストケース構造

```
テストスイート
├── 機能テスト
│   ├── インシデント管理
│   │   ├── インシデント作成
│   │   ├── 割当・エスカレーション
│   │   └── 解決・クローズ
│   ├── 問題管理
│   │   ├── 問題記録
│   │   └── 根本原因分析
│   └── 変更管理
│       ├── RFC作成
│       └── CAB承認
├── 統合テスト
│   ├── AD連携
│   ├── メール通知
│   └── 外部API
├── 非機能テスト
│   ├── パフォーマンス
│   ├── セキュリティ
│   └── ユーザビリティ
└── 回帰テスト
    └── 重要機能スイート
```

### 4.3 テストケーステンプレート

| 項目 | 内容 |
|------|------|
| テストケースID | TC_MOD_FUNC_001 |
| テストケース名 | インシデント新規作成 |
| 目的 | インシデントが正しく作成できることを確認 |
| 前提条件 | ユーザーがログイン済み、適切な権限を保有 |
| テスト手順 | 1. インシデント作成画面を開く<br>2. 必須項目を入力<br>3. 保存ボタンをクリック |
| 期待結果 | インシデントが作成され、番号が採番される |
| 実行結果 | （実行時記入） |
| エビデンス | スクリーンショット添付 |
| 備考 | 各フィールドの入力値は別紙参照 |

### 4.4 テストデータ要件

| データタイプ | 必要数 | 用途 | 準備方法 |
|-------------|--------|------|----------|
| テストユーザー | 50 | 各ロール検証 | 事前作成 |
| インシデント | 1000 | 一覧表示、検索 | CSVインポート |
| CI | 500 | CMDB検証 | Discovery実行 |
| ナレッジ | 100 | 検索、表示 | 手動作成 |

---

## 5. テスト環境

### 5.1 環境一覧

{% for env in test_environments %}
#### {{ env.name }}
- **用途**: {{ env.purpose }}
- **構成**: {{ env.configuration }}
- **データ**: {{ env.data }}
- **アクセス**: {{ env.access }}

{% endfor %}

### 5.2 環境構成図

```
[本番環境]
    ↓ データコピー（マスキング）
[ステージング環境] ← [性能テスト環境]
    ↓ 設定同期
[テスト環境]
    ↓ 基本設定
[開発環境]
```

### 5.3 環境要件

#### ハードウェア要件
| 環境 | CPU | メモリ | ストレージ | 備考 |
|------|-----|--------|-----------|------|
| DEV | 4 Core | 16GB | 100GB | 最小構成 |
| TEST | 8 Core | 32GB | 200GB | 標準構成 |
| STG | 16 Core | 64GB | 500GB | 本番相当 |
| PERF | 32 Core | 128GB | 1TB | 高負荷対応 |

#### ソフトウェア要件
- ServiceNow Platform: Tokyo版
- ブラウザ: Chrome最新版、Edge最新版、Safari最新版
- 統合ツール: 本番と同一バージョン
- 監視ツール: 各環境に導入

### 5.4 環境管理

- **リフレッシュサイクル**: フェーズ開始時
- **構成管理**: Update Setによる同期
- **アクセス制御**: IPアドレス制限、MFA必須
- **バックアップ**: 日次自動バックアップ

---

## 6. テストデータ

### 6.1 データ戦略

{% for category in test_data_strategy.data_categories %}
#### {{ category.category }}
- **ソース**: {{ category.source }}
- **準備方法**: {{ category.preparation }}
- **データ量**: {{ category.volume }}

{% endfor %}

### 6.2 データ管理

- **リフレッシュサイクル**: {{ test_data_strategy.data_management.refresh_cycle }}
- **バックアップ**: {{ test_data_strategy.data_management.backup_strategy }}
- **保持期間**: {{ test_data_strategy.data_management.cleanup_policy }}

### 6.3 コンプライアンス

- **GDPR対応**: {{ test_data_strategy.compliance.gdpr }}
- **データ保持**: {{ test_data_strategy.compliance.data_retention }}
- **アクセス制御**: {{ test_data_strategy.compliance.access_control }}

### 6.4 テストデータ生成

#### マスキング対象
| データ項目 | マスキング方法 | 例 |
|-----------|---------------|-----|
| 氏名 | 仮名置換 | 山田太郎 → テストユーザー001 |
| メールアドレス | ドメイン置換 | user@company.com → user@test.local |
| 電話番号 | 番号置換 | 03-1234-5678 → 03-0000-0001 |
| 住所 | 一般化 | 詳細住所 → 東京都 |

#### 境界値データ
- 最大文字数テスト用データ
- 特殊文字を含むデータ
- 日付境界値（月末、年末、うるう年）
- 数値境界値（0、負数、最大値）

---

## 7. 自動化戦略

### 7.1 自動化スコープ

- **目標カバレッジ**: {{ automation_strategy.automation_scope.target_coverage }}
- **優先領域**:
{% for area in automation_strategy.automation_scope.priority_areas %}
  - {{ area }}
{% endfor %}

### 7.2 自動化ツール

{% for tool in automation_strategy.tools %}
#### {{ tool.tool }}
- **用途**: {{ tool.purpose }}
- **カバレッジ**: {{ tool.coverage }}

{% endfor %}

### 7.3 自動化フレームワーク

- **設計パターン**: {{ automation_strategy.framework.design_pattern }}
- **テストデータ管理**: {{ automation_strategy.framework.test_data }}
- **レポーティング**: {{ automation_strategy.framework.reporting }}
- **バージョン管理**: {{ automation_strategy.framework.version_control }}

### 7.4 CI/CDパイプライン

```
[コードコミット]
    ↓
[静的解析] → 失敗 → [通知]
    ↓ 成功
[単体テスト自動実行]
    ↓ 成功
[結合テスト自動実行]
    ↓ 成功
[デプロイ（テスト環境）]
    ↓
[スモークテスト]
    ↓ 成功
[回帰テスト（夜間）]
    ↓
[レポート生成]
```

---

## 8. 欠陥管理

### 8.1 欠陥ライフサイクル

```
{% for status in defect_management.defect_lifecycle %}
{{ loop.index }}. {{ status }}
{% endfor %}
```

### 8.2 重要度レベル

{% for level in defect_management.severity_levels %}
#### {{ level.level }}
- **説明**: {{ level.description }}
- **SLA**: {{ level.sla }}
- **エスカレーション**: {{ level.escalation }}

{% endfor %}

### 8.3 欠陥管理フィールド

{% for field in defect_management.defect_fields %}
- {{ field }}
{% endfor %}

### 8.4 欠陥分類

| 分類 | 説明 | 例 |
|------|------|-----|
| 機能欠陥 | 期待される機能が動作しない | ボタンクリックが反応しない |
| データ欠陥 | データの不整合、誤り | 計算結果が間違っている |
| インターフェース欠陥 | 画面表示の問題 | レイアウト崩れ、文字化け |
| パフォーマンス欠陥 | 性能要件を満たさない | 応答時間が遅い |
| セキュリティ欠陥 | セキュリティ脆弱性 | 権限チェック不備 |
| ユーザビリティ欠陥 | 使いづらさ | 操作が分かりにくい |

### 8.5 欠陥トリアージ会議

- **頻度**: 日次（テスト実行期間中）
- **参加者**: テストマネージャー、開発リード、プロダクトオーナー
- **アジェンダ**:
  - 新規欠陥のレビュー
  - 優先度・重要度の決定
  - 担当者アサイン
  - 進捗確認

---

## 9. テスト報告

### 9.1 レポート体系

#### 日次レポート
- テスト実行状況
- 新規欠陥サマリー
- ブロッカー/リスク
- 翌日の計画

#### 週次レポート
- 進捗サマリー（計画vs実績）
- 欠陥傾向分析
- 品質メトリクス
- 課題と対策

#### フェーズ終了レポート
- フェーズ目標達成状況
- 詳細テスト結果
- 欠陥分析レポート
- 次フェーズへの申し送り

### 9.2 主要メトリクス

{% for metric in test_metrics %}
#### {{ metric.metric }}
- **計算式**: {{ metric.formula }}
- **目標値**: {{ metric.target }}
- **測定頻度**: {{ metric.frequency }}

{% endfor %}

### 9.3 ダッシュボード

```
┌─────────────────────────────────────────────┐
│　　　　　テスト進捗ダッシュボード　　　　　　│
├─────────────┬─────────────┬─────────────────┤
│ 実行進捗    │ 合格率      │ 欠陥状況       │
│  78% ████   │   92%       │ Open: 45       │
│  (780/1000) │  (718/780)  │ Fixed: 120     │
├─────────────┴─────────────┴─────────────────┤
│　　　　　　日次進捗トレンド　　　　　　　　　│
│ [実行数と合格率の推移グラフ]                 │
├─────────────────────────────────────────────┤
│ 重要度別欠陥 │ モジュール別欠陥分布         │
│ Critical: 0  │ [円グラフ表示]               │
│ High: 12     │                             │
│ Medium: 28   │                             │
│ Low: 5       │                             │
└─────────────────────────────────────────────┘
```

### 9.4 品質ゲート基準

| フェーズ | 基準項目 | 合格基準 |
|----------|----------|----------|
| 単体テスト | コードカバレッジ | 80%以上 |
| 結合テスト | インターフェーステスト合格率 | 95%以上 |
| システムテスト | 重大欠陥数 | 0件 |
| 受入テスト | ユーザー承認率 | 100% |

---

## 10. リスクと対策

### 10.1 テストリスク一覧

{% for risk in risk_mitigation %}
#### {{ risk.risk }}
- **影響度**: {{ risk.impact }}
- **発生確率**: {{ risk.probability }}
- **対策**: {{ risk.mitigation }}

{% endfor %}

### 10.2 コンティンジェンシープラン

#### スケジュール遅延時
1. 優先度に基づくテストケース選別
2. 並行実行によるキャッチアップ
3. 自動化範囲の拡大
4. リソース追加投入

#### 重大欠陥発見時
1. 即座に開発チームへエスカレーション
2. 該当機能のテスト一時中断
3. 修正版リリース後に集中再テスト
4. 影響範囲の追加テスト実施

#### 環境障害時
1. バックアップ環境への切り替え
2. 障害原因の調査と対策
3. データリストア
4. 中断したテストの再実行

### 10.3 品質保証体制

- **独立したテストチーム**: 客観的な品質評価
- **定期的なレビュー**: テスト設計、結果のピアレビュー
- **エスカレーションパス**: 明確な報告ライン
- **継続的改善**: レトロスペクティブの実施

---

## 付録

### A. テストツール詳細

1. **ServiceNow ATF設定ガイド**
2. **Postman/Newmanセットアップ手順**
3. **JMeter性能テストシナリオ**
4. **Jenkinsパイプライン設定**

### B. テンプレート集

1. **テストケーステンプレート**
2. **欠陥報告テンプレート**
3. **テスト実行記録シート**
4. **テスト完了報告書テンプレート**

### C. チェックリスト

1. **環境準備チェックリスト**
2. **テスト開始前チェックリスト**
3. **日次チェックリスト**
4. **フェーズ終了チェックリスト**

### D. 参考資料

1. **ServiceNowテストベストプラクティス**
2. **業界標準テストプロセス（ISTQB）**
3. **自動化ROI計算ガイド**
4. **性能テスト基準値**

### E. 用語集

| 用語 | 定義 |
|------|------|
| ATF | Automated Test Framework（ServiceNow自動テストフレームワーク） |
| UAT | User Acceptance Testing（ユーザー受入テスト） |
| SIT | System Integration Testing（システム統合テスト） |
| API | Application Programming Interface |
| CI/CD | Continuous Integration/Continuous Delivery |
| SLA | Service Level Agreement |

### F. 変更履歴

| バージョン | 日付 | 変更内容 | 変更者 |
|------------|------|----------|--------|
| {{ version }} | {{ created_date | date_format }} | 初版作成 | {{ author.name }} |