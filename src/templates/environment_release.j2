# {{ project_name }} - 環境・リリース管理設計書

**バージョン:** {{ version }}  
**作成者:** {{ author.name }}  
**作成日:** {{ created_date | date_format }}  
**ドキュメントタイプ:** 環境・リリース管理設計書

---

## 1. 概要

### 1.1 目的
本書は、{{ project_name }}におけるServiceNow環境管理戦略とリリース管理プロセスを定義し、安定的かつ効率的なシステム運用を実現するための設計指針を提供します。

### 1.2 環境管理の目標
{% for objective in environment_strategy.objectives %}
- {{ objective }}
{% endfor %}

### 1.3 基本原則
{% for principle in environment_strategy.principles %}
- {{ principle }}
{% endfor %}

---

## 2. 環境戦略

### 2.1 環境アプローチ
**採用アプローチ**: {{ environment_strategy.approach }}

### 2.2 環境の役割と責任

| 環境 | 主管部門 | 承認者 | 利用者 |
|------|----------|--------|--------|
| Development | 開発チーム | 開発リーダー | 開発者、設定担当者 |
| Test | QAチーム | QAマネージャー | テスター、開発者 |
| UAT | ビジネス部門 | ビジネスオーナー | ビジネスユーザー |
| Production | 運用チーム | ITサービスマネージャー | 全ユーザー |

### 2.3 環境間の昇格パス

```
[Development] → [Test] → [UAT] → [Production]
     ↓            ↓         ↓          ↓
  単体テスト   統合テスト  受入テスト   本番運用
```

---

## 3. 環境構成

### 3.1 環境詳細

{% for env in environments %}
#### {{ env.name }}
- **URL**: {{ env.url }}
- **用途**: {{ env.purpose }}
- **リフレッシュサイクル**: {{ env.refresh_cycle }}
- **主要ユーザー**: {{ env.users | join(', ') }}
- **データ分類**: {{ env.data_classification | default('テストデータ（非本番）') }}

{% endfor %}

### 3.2 環境別設定

| 設定項目 | Dev | Test | UAT | Prod |
|----------|-----|------|-----|------|
| インスタンスサイズ | Small | Medium | Medium | Large |
| ユーザー数上限 | 50 | 100 | 200 | 無制限 |
| メモリ割当 | 8GB | 16GB | 16GB | 32GB |
| バックアップ | 週次 | 日次 | 日次 | 日次+リアルタイム |
| 保持期間 | 7日 | 14日 | 30日 | 90日 |

### 3.3 環境固有設定

#### メール設定
| 環境 | 送信設定 | 受信設定 |
|------|----------|----------|
| Dev | 開発用SMTPサーバー（すべて開発者へ転送） | 無効 |
| Test | テスト用SMTPサーバー（ドメイン制限） | テスト用メールボックス |
| UAT | 本番同等（送信先制限） | UAT用メールボックス |
| Prod | 本番SMTPサーバー | 本番メールボックス |

#### 統合設定
| 環境 | 統合エンドポイント | 認証 |
|------|-------------------|------|
| Dev | モックサービス | テスト用証明書 |
| Test | テスト環境API | テスト用証明書 |
| UAT | UAT環境API | UAT用証明書 |
| Prod | 本番API | 本番証明書 |

---

## 4. リリース管理プロセス

### 4.1 リリースフェーズ

{% for phase in release_process.phases %}
#### {{ loop.index }}. {{ phase.name }}フェーズ
**主な活動**:
{% for activity in phase.activities %}
- {{ activity }}
{% endfor %}

{% endfor %}

### 4.2 リリースタイプ

{% for release_type in release_process.release_types %}
#### {{ release_type.type }}
- **頻度**: {{ release_type.frequency }}
- **リードタイム**: {{ release_type.lead_time }}
- **承認プロセス**: {{ release_type.approval_process | default('標準CABプロセス') }}

{% endfor %}

### 4.3 リリースカレンダー

| リリースタイプ | スケジュール | ブラックアウト期間 |
|--------------|--------------|------------------|
| 定期リリース | 毎月第3土曜日 21:00-23:00 | 月末・年末年始 |
| パッチリリース | 毎月第1火曜日 22:00-23:00 | 四半期末 |
| 緊急リリース | 随時（要CAB承認） | なし（影響度による） |

---

## 5. Update Set管理

### 5.1 Update Set戦略

{% if update_set_strategy.approach %}
{{ update_set_strategy.approach }}
{% else %}
#### 基本方針
- **命名規則**: `[環境]_[プロジェクト]_[機能]_[日付]`
  - 例: `DEV_ITSM_IncidentMgmt_20240315`
- **スコープ**: 機能単位でUpdate Setを作成
- **親子関係**: 大規模変更は親Update Setで管理
{% endif %}

### 5.2 Update Setライフサイクル

```
作成 → 開発 → 完了 → レビュー → テスト → 承認 → 本番適用
 ↓                                              ↓
 └──────────── 差戻し ←────────────────────────┘
```

### 5.3 Update Set管理ルール

| ルール | 説明 |
|--------|------|
| 単一責任の原則 | 1つのUpdate Setは1つの機能/修正に限定 |
| 完全性の確保 | 依存関係のあるすべての変更を含める |
| バージョン管理 | 外部バージョン管理システムと連携 |
| レビュー必須 | すべてのUpdate Setは適用前にレビュー |
| バックアウト計画 | 各Update Setにロールバック手順を定義 |

### 5.4 コンフリクト解決

#### 検出方法
- Update Set Previewでコンフリクト検出
- 定期的なコンフリクトレポート実行

#### 解決戦略
1. **Skip**: ターゲット環境の設定を維持
2. **Accept**: Update Setの変更を適用
3. **Merge**: 手動で変更をマージ

---

## 6. CI/CD・DevOps

### 6.1 CI/CDパイプライン

{% if cicd_pipeline.stages %}
{% for stage in cicd_pipeline.stages %}
#### {{ stage.name }}
- **ツール**: {{ stage.tools }}
- **処理内容**: {{ stage.tasks }}
- **成功条件**: {{ stage.success_criteria }}
{% endfor %}
{% else %}
```
[コード変更] → [自動テスト] → [品質ゲート] → [デプロイ] → [検証]
     ↓              ↓              ↓             ↓           ↓
  Git Push      ATF実行      SonarQube     Update Set    Smoke Test
                                分析          適用
```

#### パイプラインステージ

1. **ソース管理**
   - Git連携（外部リポジトリ）
   - コードレビュー（Pull Request）
   - ブランチ戦略（Git Flow）

2. **自動テスト**
   - ATF（Automated Test Framework）実行
   - 単体テストカバレッジ80%以上
   - 統合テスト必須

3. **品質分析**
   - コード品質チェック
   - セキュリティスキャン
   - パフォーマンス分析

4. **自動デプロイ**
   - Update Set自動作成
   - 環境間の自動昇格
   - ロールバック自動化

5. **検証**
   - Smoke Test実行
   - ヘルスチェック
   - アラート確認
{% endif %}

### 6.2 DevOpsツールチェーン

| カテゴリ | ツール | 用途 |
|----------|--------|------|
| ソース管理 | Git/GitHub | コードバージョン管理 |
| CI/CD | Jenkins/GitHub Actions | パイプライン実行 |
| テスト自動化 | ServiceNow ATF | 自動テスト |
| 品質管理 | SonarQube | コード品質分析 |
| 監視 | ServiceNow Event Management | システム監視 |

---

## 7. 環境同期・リフレッシュ

### 7.1 環境リフレッシュ戦略

{% if sync_strategy.refresh_schedule %}
{{ sync_strategy.refresh_schedule }}
{% else %}
| 環境 | 頻度 | タイミング | ソース |
|------|------|------------|--------|
| Dev | 週次 | 毎週日曜日 02:00 | Prod (匿名化) |
| Test | 月次 | 第1日曜日 02:00 | Prod (匿名化) |
| UAT | リリース前 | リリース2週間前 | Prod (匿名化) |
{% endif %}

### 7.2 データ匿名化

#### 対象データ
- 個人情報（氏名、メール、電話番号）
- 機密情報（給与、評価データ）
- 本番固有設定（API Keys、パスワード）

#### 匿名化方法
```sql
-- 例: ユーザーデータの匿名化
UPDATE sys_user 
SET email = CONCAT('test.user', sys_id, '@test.com'),
    phone = '000-0000-0000',
    mobile_phone = '000-0000-0000'
WHERE sys_id != 'admin';
```

### 7.3 環境固有設定の保護

| 設定タイプ | 保護方法 |
|------------|----------|
| システムプロパティ | 環境変数で上書き |
| 統合設定 | Update Setから除外 |
| 認証情報 | 環境別に再設定 |
| スケジュールジョブ | 環境別に有効/無効化 |

---

## 8. 変更管理統合

### 8.1 変更諮問委員会（CAB）

{% if change_integration.cab_process %}
{{ change_integration.cab_process }}
{% else %}
#### CAB構成
- **議長**: ITサービスマネージャー
- **常任メンバー**:
  - 開発リーダー
  - インフラリーダー
  - セキュリティ担当者
  - ビジネス代表者

#### CAB開催スケジュール
- **定期CAB**: 毎週木曜日 14:00-15:00
- **緊急CAB**: 必要に応じて招集（30分以内）
{% endif %}

### 8.2 変更カテゴリ

| カテゴリ | 定義 | 承認レベル | リードタイム |
|----------|------|------------|--------------|
| 標準変更 | 事前承認済み、低リスク | 自動承認 | 即時 |
| 通常変更 | 標準的な変更、中リスク | CAB承認 | 1週間 |
| 緊急変更 | 即時対応が必要 | 緊急CAB | 2時間 |
| 重大変更 | 大規模、高リスク | CAB+経営承認 | 2週間 |

### 8.3 変更記録テンプレート

```
変更番号: CHG0012345
変更タイトル: [簡潔な説明]
変更理由: [ビジネス価値/問題解決]
影響範囲: [影響を受けるサービス/ユーザー]
実装計画: [ステップバイステップの手順]
ロールバック計画: [失敗時の復旧手順]
テスト結果: [テスト完了の証跡]
```

---

## 9. 品質保証

### 9.1 品質ゲート

{% for gate in quality_gates %}
#### {{ gate.name }}
- **チェック項目**: {{ gate.checks | join(', ') }}
- **合格基準**: {{ gate.criteria }}
- **失敗時の対応**: {{ gate.failure_action }}

{% endfor %}

### 9.2 テスト戦略

| テストレベル | 環境 | 責任者 | カバレッジ目標 |
|-------------|------|--------|---------------|
| 単体テスト | Dev | 開発者 | 80% |
| 統合テスト | Test | QAチーム | 70% |
| システムテスト | Test | QAチーム | 100%（主要フロー） |
| 受入テスト | UAT | ビジネスユーザー | 100%（業務シナリオ） |
| 回帰テスト | Test/UAT | QAチーム | 100%（自動化） |

### 9.3 品質メトリクス

| メトリクス | 目標値 | 測定方法 |
|-----------|--------|----------|
| コードカバレッジ | 80%以上 | ATF/SonarQube |
| 欠陥密度 | 1件/100FP以下 | 欠陥管理ツール |
| テスト自動化率 | 70%以上 | ATF実行率 |
| 本番障害率 | 5%以下 | インシデント分析 |

---

## 10. 運用手順

### 10.1 日常運用タスク

{% if operational_procedures.daily_tasks %}
{% for task in operational_procedures.daily_tasks %}
- {{ task }}
{% endfor %}
{% else %}
#### 日次タスク
- [ ] 環境ヘルスチェック（全環境）
- [ ] バックアップ完了確認
- [ ] エラーログ確認
- [ ] パフォーマンス監視
- [ ] セキュリティアラート確認

#### 週次タスク
- [ ] Update Setレビュー
- [ ] テスト結果分析
- [ ] 環境間差分チェック
- [ ] キャパシティレビュー
- [ ] Dev環境リフレッシュ

#### 月次タスク
- [ ] リリース計画レビュー
- [ ] 品質メトリクス分析
- [ ] ライセンス使用状況確認
- [ ] Test環境リフレッシュ
- [ ] 災害復旧訓練
{% endif %}

### 10.2 トラブルシューティング

| 問題 | 症状 | 対応手順 |
|------|------|----------|
| Update Set適用エラー | Preview失敗 | 1. エラーログ確認<br>2. 依存関係チェック<br>3. 手動解決 |
| 環境間不整合 | 動作差異 | 1. 設定比較<br>2. Update Set確認<br>3. 手動同期 |
| パフォーマンス劣化 | レスポンス遅延 | 1. リソース確認<br>2. クエリ分析<br>3. インデックス最適化 |

### 10.3 エスカレーション

```
L1: 運用担当者（15分以内の初期対応）
　　　　↓
L2: 環境管理者（1時間以内の詳細調査）
　　　　↓
L3: ServiceNowアーキテクト（根本原因分析）
　　　　↓
ベンダーサポート（製品不具合の場合）
```

---

## 付録

### A. チェックリスト

#### リリース前チェックリスト
- [ ] すべてのテスト完了
- [ ] CAB承認取得
- [ ] ロールバック計画確認
- [ ] 関係者への通知完了
- [ ] バックアップ取得
- [ ] 変更記録作成

#### 環境リフレッシュチェックリスト
- [ ] データ匿名化スクリプト準備
- [ ] 環境固有設定のバックアップ
- [ ] ユーザーへの事前通知
- [ ] リフレッシュ実行
- [ ] 環境固有設定の復元
- [ ] 動作確認完了

### B. テンプレート
- Update Set命名規則テンプレート
- 変更要求テンプレート
- リリースノートテンプレート
- インシデント報告テンプレート

### C. 参考資料
- ServiceNow Application Lifecycle Management
- ServiceNow Update Set Best Practices
- ITIL Release Management
- DevOps Handbook

### D. 変更履歴
| バージョン | 日付 | 変更内容 | 変更者 |
|------------|------|----------|--------|
| {{ version }} | {{ created_date | date_format }} | 初版作成 | {{ author.name }} |